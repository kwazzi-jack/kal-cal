# Config yaml for 'kalcal`

# 1: # Create an empty measurement set called KAT7.MS
#   command: "kal-create ms"
#   arguments:
#     msname: "KAT7.MS"
#   options:
#     tel: 'kat-7'
#     pos_type: 'ascii'
#     dec: ' -30d16m41s' 
#     ra: '11h49m36s'    
#     synthesis: 2
#     dtime: 20
#     freq0: "1GHz"
#     nchan: "1"
#     dfreq: "1MHz"
#     stokes: "XX XY YX YY"

# 2: # Create magnitude-only gains and save it to gains.npy
#   command: "kal-create gains"
#   arguments:
#     ms: "KAT7.MS"
#     sky_model: "model-1"
#   options:
#     type: "normal"
#     std: 0.2
#     diffs: [0.02, 0.05, 0.5]
#     die: True
#     out_file: "gains.npy"   

# 3: # Simulate visibilities using KAT7.MS and gains.npy
#   command: "kal-create data"
#   arguments:
#     ms: "KAT7.MS"
#     sky_model: "model-1"
#     gains: "normal_gains.npy"
#   options:
#     std: 1.0
#     phase_convention: "CODEX"
#     die: True
#     utime: 1
#     ncpu: 8
#     mname: "MODEL"
#     dname: "DATA"

4: # Run Vanilla Filter and Smoother over visibilities
  command: "kal-calibrate vanilla"
  arguments:
    ms: "KAT7.MS"
  options:
    filter: 1
    smoother: 3
    algorithm: "NUMBA"
    sigma_f: 0.2
    sigma_n: 1.0
    step_control: 0.5
    model_column: "MODEL"
    vis_column: "DATA"
    weight_column: "WEIGHT"
    out_filter: "filter.npy"
    out_smoother: "smoother.npy"
    out_data: "CORRECTED_DATA"

# 5: # Plot gains-magnitude from calibrated and true gains
#   command: "kal-plot gains"
#   options:
#     plot: [
#       ["normal_gains.npy", "True Jones", "black", "-"],
#       ["filter_gains.npy", "EKF", "red", "."],
#       ["smoother_gains.npy", "EKS", "green", "-"]
#     ]
#     ref_ant: 0
#     show: "0, 1, 2, 3"
#     axis: "TIME"
#     complex_axis: "REAL"
#     title: "Gains magnitude plot over TIME (REAL)"
#     out_file: "gains_plot.png"
#     display: True