# Config yaml for 'kalcal`

1: # Create an empty measurement set called meerkat.ms
  command: "kal-create ms"
  arguments:
    msname: "meerkat.ms"
  options:
    tel: 'meerkat'
    pos_type: 'ascii'
    dec: '-30d14m50s' 
    ra: '11h49m15s'    
    synthesis: 2
    dtime: 10
    freq0: "1GHz"
    nchan: "1"
    dfreq: "1MHz"
    stokes: "XX XY YX YY"

2: # Create magnitude-only gains and save it to true_gains.npy
  command: "kal-create gains"
  arguments:
    ms: "meerkat.ms"
    sky_model: "skymodel.txt"
  options:
    type: "normal"
    std: 0.2
    diffs: [0.02, 0.05, 0.5]
    die: True
    out_file: "true_gains.npy"   

3: # Simulate visibilities using meerkat.ms and gains.npy
  command: "kal-create data"
  arguments:
    ms: "meerkat.ms"
    sky_model: "skymodel.txt"
    gains: "true_gains.npy"
  options:
    std: 1.0
    phase_convention: "CODEX"
    die: True
    utime: 30
    ncpu: 8
    mname: "MODEL_DATA"
    dname: "DATA"

4: # Run Vanilla Filter and Smoother over visibilities
  command: "kal-calibrate vanilla"
  arguments:
    ms: "meerkat.ms"
  options:
    filter: 1
    smoother: 1
    algorithm: "NUMBA"
    sigma_f: 0.0075
    sigma_n: 1.0
    step_control: 0.5
    model_column: "MODEL_DATA"
    vis_column: "DATA"
    weight_column: "WEIGHT"
    out_filter: "filter.npy"
    out_smoother: "smoother.npy"    
    out_data: ""
    out_weight: ""
    ncpu: 8

5: # Plot gains-magnitude from calibrated and true gains
  command: "kal-plot gains"
  options:
    plot: [
      ["true_gains.npy", "True Jones", "black", "-"],
      ["filter.npy", "EKF", "red", "."],
      ["smoother.npy", "EKS", "green", "-"]
    ]
    ref_ant: 0
    show: "0, 1, 2, 3"
    axis: "TIME"
    complex_axis: "REAL"
    title: "Gains magnitude plot over TIME (REAL)"
    out_file: "gains_plot.png"
    display: True